# -*- coding: utf-8 -*-
"""캡스톤식품영양.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EkIPLgKVcsCwqHQgxkTWDGyVUwRmz5ie
"""

# 데이터 전처리

from google.colab import drive
drive.mount('/content/drive')

import os

# 마운트된 드라이브의 경로
drive_path = "/content/drive/My Drive/"

# 드라이브에 있는 파일 목록 출력
files = os.listdir(drive_path)
for file in files:
    print(file)

import pandas as pd

file_path = "/content/drive/My Drive/식품영양성분정보.csv"
df = pd.read_csv(file_path, encoding='cp949')
print(df)

df.columns

print(df['식품코드'])

df['그룹'] = df['식품코드'].str[:4]


grouped_data = df.groupby('그룹')

for group_name, group_data in grouped_data:
    print("그룹:", group_name)
    print(group_data[['식품코드', '식품명']])
    print("\n")

# 그룹화된 데이터프레임의 고유 그룹 수를 확인합니다.
num_groups = df.groupby('그룹').ngroups
print("그룹의 수:", num_groups)

group_names = grouped_data.groups.keys()
print("그룹 이름:", list(group_names))

# 분류 딕셔너리 생성
category_dict = {
    "밥류": ['D101', 'D102', 'D103', 'D104', 'D105', 'D106', 'D107', 'D108', 'D109', 'D110', 'D111', 'D112', 'D113', 'D114', 'D115', 'D116', 'D117', 'D120', 'D127', 'D201', 'D205', 'D208', 'D211', 'D301', 'D303', 'D304', 'D305', 'D306', 'D307', 'D308', 'D309', 'D310', 'D311', 'D312', 'D313', 'D314', 'D315', 'D316', 'D317', 'D318', 'D319', 'D320', 'D324', 'D327', 'D401', 'D402', 'D403', 'D404', 'D405', 'D406', 'D407', 'D408', 'D409', 'D410', 'D411', 'D412', 'D413', 'D414', 'D501', 'D502', 'D503', 'D504', 'D505', 'D506', 'D507', 'D508', 'D509', 'D510', 'D511', 'D512', 'D513', 'D514', 'D601', 'D602', 'D603', 'D604', 'D605', 'D606', 'D607', 'D608', 'D609', 'D610', 'D611', 'D612', 'D613', 'D614', 'D701', 'D702', 'D703', 'D704', 'D705', 'D706', 'D707', 'D708', 'D709', 'D710', 'D711', 'D712', 'D713', 'D714', 'P114', 'P117', 'P123'],
    "간식류": ['D102', 'D202', 'D212', 'D219', 'D302', 'D319', 'D324', 'D327', 'P101', 'P102', 'P103', 'P104', 'P105', 'P106', 'P107', 'P108'],
    "음료": ['D120', 'D220', 'D222', 'D320', 'P109'],
    "스파게티": ['D203'],
    "수프": ['D204'],
    "분식": ['D210'],
    "샐러드": ['D214'],
    "소스/드레싱": ['D218', 'D318', 'D718', 'P112', 'P113'],
    "영유아/아동 영양 보충 제품": ['P110'],
    "의료용/환자용 식품": ['P111'],
    "주류": ['P115'],
    "밀가루 및 냉동과일": ['P116'],
    "유제품": ['P118', 'P119'],
    "수산가공품": ['P120'],
    "가공식품/특수식품": ['P121'],
    "가공식품/기타": ['P124']
}

# 분류 함수 정의
def classify_food_code(food_code):
    code_prefix = food_code[:4]  # 식품코드에서 4번째 자리까지 추출
    for category, codes in category_dict.items():
        if code_prefix in codes:
            return category
    return "Unknown"  # 분류되지 않은 코드의 경우 "Unknown"으로 분류

# 분류 열 추가
df["분류"] = df["식품코드"].apply(classify_food_code)

# 결과 확인
print(df.head())

print(df)

df.to_csv('/content/drive/My Drive/식품DB.csv', index=False)



file_path= '/content/drive/My Drive/식품DB.csv의 사본'
x = pd.read_csv(file_path)

print(x)

x.columns

print(x['분류'])









# 필요한 열만 추출
selected_columns = ['식품코드', '식품명', '에너지(kcal)', '탄수화물(g)', '당류(g)', '지방(g)', '트랜스지방산(g)', '포화지방산(g)', '콜레스테롤(mg)', '단백질(g)', '칼슘(mg)', '나트륨(mg)','분류']
new_df = df[selected_columns]

print(new_df)

new_df.to_csv('/content/drive/My Drive/최최종식품DB.csv', index=False)







import pandas as pd
filename = "/content/drive/My Drive/selected_columns.csv"
aa = pd.read_csv(filename, dtype=str)

print(aa)

# 분류 딕셔너리 생성
category_dict = {
    "밥류": ['D101', 'D102', 'D103', 'D104', 'D105', 'D106', 'D107', 'D108', 'D109', 'D110', 'D111', 'D112', 'D113', 'D114', 'D115', 'D116', 'D117', 'D120', 'D127', 'D201', 'D205', 'D208', 'D211', 'D301', 'D303', 'D304', 'D305', 'D306', 'D307', 'D308', 'D309', 'D310', 'D311', 'D312', 'D313', 'D314', 'D315', 'D316', 'D317', 'D318', 'D319', 'D320', 'D324', 'D327', 'D401', 'D402', 'D403', 'D404', 'D405', 'D406', 'D407', 'D408', 'D409', 'D410', 'D411', 'D412', 'D413', 'D414', 'D501', 'D502', 'D503', 'D504', 'D505', 'D506', 'D507', 'D508', 'D509', 'D510', 'D511', 'D512', 'D513', 'D514', 'D601', 'D602', 'D603', 'D604', 'D605', 'D606', 'D607', 'D608', 'D609', 'D610', 'D611', 'D612', 'D613', 'D614', 'D701', 'D702', 'D703', 'D704', 'D705', 'D706', 'D707', 'D708', 'D709', 'D710', 'D711', 'D712', 'D713', 'D714', 'P114', 'P117', 'P123'],
    "간식류": ['D102', 'D202', 'D212', 'D219', 'D302', 'D319', 'D324', 'D327', 'P101', 'P102', 'P103', 'P104', 'P105', 'P106', 'P107', 'P108'],
    "음료": ['D120', 'D220', 'D222', 'D320', 'P109'],
    "스파게티": ['D203'],
    "수프": ['D204'],
    "분식": ['D210'],
    "샐러드": ['D214'],
    "소스/드레싱": ['D218', 'D318', 'D718', 'P112', 'P113'],
    "영유아/아동 영양 보충 제품": ['P110'],
    "의료용/환자용 식품": ['P111'],
    "주류": ['P115'],
    "밀가루 및 냉동과일": ['P116'],
    "유제품": ['P118', 'P119'],
    "수산가공품": ['P120'],
    "가공식품/특수식품": ['P121'],
    "가공식품/기타": ['P124']
}

# 분류 함수 정의
def classify_food_code(food_code):
    code_prefix = food_code[:4]  # 식품코드에서 4번째 자리까지 추출
    for category, codes in category_dict.items():
        if code_prefix in codes:
            return category
    return "Unknown"  # 분류되지 않은 코드의 경우 "Unknown"으로 분류

# 분류 열 추가
aa["분류"] = aa["식품코드"].apply(classify_food_code)

# 결과 확인
print(aa.head())

print(aa)

# 데이터프레임을 CSV 파일로 저장
aa.to_csv('/content/drive/My Drive/aa.csv', index=False)



"""식품DB_2"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

file_path = "/content/drive/My Drive/캡스톤DB/식품DB.csv"
df = pd.read_csv(file_path)
print(df)



selected_columns = ['식품코드', '식품명', '에너지(kcal)', '탄수화물(g)', '당류(g)', '지방(g)', '트랜스지방산(g)', '포화지방산(g)', '콜레스테롤(mg)', '단백질(g)', '칼슘(mg)', '나트륨(mg)','식품중량']
new_df = df[selected_columns]

print(new_df)

# '식품중량' 열에서 숫자 부분 추출하고 실수형으로 변환
new_df['식품중량(g)'] = new_df['식품중량'].str.extract('(\d+)').astype(float)

new_df['중량비율'] = 100 / new_df['식품중량(g)']

new_df.loc[:, '식품중량(g)'] = new_df['식품중량(g)']
new_df.loc[:, '중량비율'] = new_df['중량비율']

nutrients = ['에너지(kcal)', '탄수화물(g)', '당류(g)', '지방(g)', '트랜스지방산(g)', '포화지방산(g)', '콜레스테롤(mg)', '단백질(g)', '칼슘(mg)', '나트륨(mg)']
for nutrient in nutrients:
    new_df[nutrient] = new_df[nutrient] * new_df['중량비율']

selected_columns = ['식품코드', '식품명', '에너지(kcal)', '탄수화물(g)', '당류(g)', '지방(g)', '트랜스지방산(g)', '포화지방산(g)', '콜레스테롤(mg)', '단백질(g)', '칼슘(mg)', '나트륨(mg)']
new_df = new_df[selected_columns]

print(new_df)

# 영양소 비율로 음식 분류하는 함수
def classify_food(row):
    carbohydrate = row['탄수화물(g)']
    fat = row['지방(g)']
    protein = row['단백질(g)']

    # 전체 영양소 합계 계산 (탄수화물 + 지방 + 단백질)
    total_nutrients = carbohydrate + fat + protein

    # 각 영양소의 비율 계산
    if total_nutrients > 0:
        carb_ratio = carbohydrate / total_nutrients
        fat_ratio = fat / total_nutrients
        protein_ratio = protein / total_nutrients
    else:
        carb_ratio, fat_ratio, protein_ratio = 0, 0, 0  # 분모가 0인 경우를 처리하기 위해 0으로 설정

    if protein_ratio >= 0.2:
        return '고단백음식'
    elif fat_ratio >= 0.7:
        return '고지방음식'
    else:
        return '일반음식'

# 각 음식 분류 적용
new_df['음식분류'] = new_df.apply(classify_food, axis=1)

# 결과 확인
print(new_df[['식품코드', '식품명', '에너지(kcal)', '탄수화물(g)', '당류(g)', '지방(g)', '트랜스지방산(g)', '포화지방산(g)', '콜레스테롤(mg)', '단백질(g)', '칼슘(mg)', '나트륨(mg)','음식분류']])

new_df.to_csv('/content/drive/My Drive/식품DB_2.csv', index=False)



from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

file_path = "/content/drive/My Drive/캡스톤DB/최최종식품DB.csv"
df = pd.read_csv(file_path)
print(df)

df.fillna(0, inplace=True)
print(df)

output_file_path = "/content/drive/My Drive/캡스톤DB/최종식품DB_결측값처리.csv"
df.to_csv(output_file_path, index=False,encoding='utf-8-sig')

import pandas as pd

file_path = "/content/drive/My Drive/캡스톤DB/최종식품DB_결측값처리.csv"
df = pd.read_csv(file_path)
print(df)

# 식품명에서 언더바가 있는지 확인하고 분리
df['Food_Left'] = df['식품명'].apply(lambda x: x.split('_')[0] if '_' in x else x)
df['Food_Right'] = df['식품명'].apply(lambda x: x.split('_')[1] if '_' in x else '')

# 결과 출력
print(df)

df['Food_Left_in_Right'] = df.apply(lambda row: row['Food_Left'] in row['Food_Right'], axis=1)
print(df)

for index, row in df.iterrows():
    if not row['Food_Left_in_Right']:
        df.at[index, 'Food_Right'] = row['Food_Right'] + row['Food_Left']

print(df)

print(df['Food_Right'])

df['식품명'] = df['Food_Right']
print(df)

# CSV 파일로 저장
df.to_csv("/content/drive/My Drive/캡스톤DB/최종식품DB1.csv", index=False)



